ai-trend-agent/
â”œâ”€â”€ /backend/
â”‚   â”œâ”€â”€ app.py                    # FastAPI backend with LangChain + Gemini + Pinecone
â”‚   â”œâ”€â”€ memory_tools.py           # Memory storage & retrieval functions
â”‚   â”œâ”€â”€ trend_tools.py            # Trend aggregator & historical comparator
â”‚   â”œâ”€â”€ api_tools.py              # Real-time API calls (NewsAPI, Serper API)
â”‚   â”œâ”€â”€ requirements.txt          # Python dependencies
â”‚   â”œâ”€â”€ .env                      # API keys and environment variables
â”‚   â””â”€â”€ vercel.json               # Vercel deployment config for backend
â”‚
â”œâ”€â”€ /frontend/
â”‚   â”œâ”€â”€ /components/
â”‚   â”‚   â”œâ”€â”€ ChatBox.jsx           # Chat input and result display UI
â”‚   â”‚   â””â”€â”€ TrendCard.jsx         # (Optional) Individual trend cards component
â”‚   â”œâ”€â”€ /pages/
â”‚   â”‚   â””â”€â”€ index.js              # Main page with chat and trend fetcher
â”‚   â”œâ”€â”€ /utils/
â”‚   â”‚   â””â”€â”€ api.js                # Frontend API utility
â”‚   â”œâ”€â”€ tailwind.config.js        # Tailwind CSS configuration
â”‚   â”œâ”€â”€ package.json              # NPM dependencies
â”‚   â”œâ”€â”€ .env.local                # Frontend environment variables
â”‚   â”œâ”€â”€ next.config.js            # Next.js configuration
â”‚   â””â”€â”€ vercel.json               # Vercel deployment config for frontend
â”‚
â”œâ”€â”€ /deployment/
â”‚   â””â”€â”€ README.md                 # Deployment instructions (optional)
â”‚
â”œâ”€â”€ README.md                     # Project documentation
â””â”€â”€ LICENSE                       # Project license (optional)

Deliverables in the Repo

backend/ â†’ Python (FastAPI + LangChain + Pinecone)
frontend/ â†’ Next.js + Tailwind CSS UI
deployment/ â†’ Vercel deploy configs
README.md â†’ Setup, usage instructions, environment variable configs
.env and .env.local â†’ (gitignored) containing API keys
Packaging Plan
Prepare a zip archive:
/backend/ fully working with Python virtualenv setup
/frontend/ working Next.js app with Tailwind
Include clear README instructions for both projects
Configure .gitignore for sensitive keys and dependencies
Vercel Deployment Configs
/backend/vercel.json

{
  "version": 2,
  "builds": [
    { "src": "app.py", "use": "@vercel/python" }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "/app.py" }
  ]
}

/frontend/vercel.json

{
  "version": 2,
  "builds": [
    { "src": "next.config.js", "use": "@vercel/next" }
  ]
}

Complete Backend Code
/backend/app.py

from fastapi import FastAPI, HTTPException
from memory_tools import store_memory, retrieve_memory
from trend_tools import fetch_trends, compare_trends
from api_tools import fetch_news, fetch_serper_data

app = FastAPI()

@app.get("/trends")
def get_trends(query: str, user_id: str):
    memory = retrieve_memory(user_id)
    trends = fetch_trends(query)
    comparison = compare_trends(trends, memory)
    return {"trends": trends, "comparison": comparison}

@app.post("/memory")
def save_memory(user_id: str, data: dict):
    store_memory(user_id, data)
    return {"status": "saved"}

/backend/memory_tools.py

import pinecone
import os

pinecone.init(api_key=os.getenv("PINECONE_API_KEY"), environment=os.getenv("PINECONE_ENV"))
index = pinecone.Index("trend-memory")

def store_memory(user_id, data):
    index.upsert([(user_id, data)])

def retrieve_memory(user_id):
response = index.fetch(ids=[user_id])
    return response.vectors.get(user_id)

/backend/trend_tools.py
 from api_tools import fetch_news, fetch_serper_data

def fetch_trends(query):
    news_trends = fetch_news(query)
    search_trends = fetch_serper_data(query)
    return {"news": news_trends, "search": search_trends}

def compare_trends(current, memory):
    if not memory:
        return "No historical data available."
    return f"Comparing {len(current['news'])} news and {len(current['search'])} search trends with past records."

/backend/api_tools.py

import requests
import os

NEWS_API_KEY = os.getenv("NEWS_API_KEY")
SERPER_API_KEY = os.getenv("SERPER_API_KEY")

def fetch_news(query):
    url = f"https://newsapi.org/v2/everything?q={query}&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    return response.json().get("articles", [])

def fetch_serper_data(query):
    url = "https://google.serper.dev/search"
    headers = {"X-API-KEY": SERPER_API_KEY}
    response = requests.post(url, json={"q": query}, headers=headers)
    return response.json().get("organic", [])

Complete Frontend Code
/frontend/components/ChatBox.jsx
import { useState } from 'react'

export default function ChatBox({ onSend }) {
  const [query, setQuery] = useState('')
  return (
    <div>
      <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Enter a trend query" />
      <button onClick={() => onSend(query)}>Get Trends</button>
    </div>
  )
}

/frontend/pages/index.js

import { useState } from 'react'
import ChatBox from '../components/ChatBox'

export default function Home() {
  const [result, setResult] = useState(null)

  async function handleSend(query) {
    const res = await fetch(/api/trends?query=${query}&user_id=test_user)
    const data = await res.json()
    setResult(data)
  }

  return (
    <div>
      <h1>AI Trend Agent</h1>
      <ChatBox onSend={handleSend} />
      {result && <pre>{JSON.stringify(result, null, 2)}</pre>}
    </div>
  )
}

/frontend/utils/api.js
export async function fetchTrends(query) {
  const res = await fetch(/api/trends?query=${query}&user_id=test_user)
  return res.json()
}

Frontend (Next.js + Tailwind CSS)
ðŸ“œ /frontend/pages/index.js
javascript
CopyEdit
import ChatBox from "@/components/ChatBox";

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-6 bg-gray-100">
      <h1 className="text-4xl font-bold mb-4">Trend Insight AI Agent</h1>
      <ChatBox />
 Â Â Â </div>
Â Â );
}